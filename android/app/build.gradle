apply plugin: "com.android.application"
apply plugin: 'kotlin-android'

project.ext.envConfigFiles = [
        debug             : ".env.eduparent",
        release           : ".env.eduparent",
        anothercustombuild: ".env.eduparent",
]


apply from: project(':react-native-config').projectDir.getPath() + "/dotenv.gradle"

import com.android.build.OutputFile

/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation. If none specified and
 *   // "index.android.js" exists, it will be used. Otherwise "index.js" is
 *   // default. Can be overridden with ENTRY_FILE environment variable.
 *   entryFile: "index.android.js",
 *
 *   // https://reactnative.dev/docs/performance#enable-the-ram-format
 *   bundleCommand: "ram-bundle",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // whether to disable dev mode in custom build variants (by default only disabled in release)
 *   // for example: to disable dev mode in the staging build type (if configured)
 *   devDisabledInStaging: true,
 *   // The configuration property can be in the following formats
 *   //         'devDisabledIn${productFlavor}${buildType}'
 *   //         'devDisabledIn${buildType}'
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"],
 *
 *   // override which node gets called and with what additional arguments
 *   nodeExecutableAndArgs: ["node"],
 *
 *   // supply additional arguments to the packager
 *   extraPackagerArgs: []
 * ]
 */

project.ext.react = [
        enableHermes: true,  // clean and rebuild if changing
]

apply from: "../../node_modules/react-native/react.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = true

/**
 * The preferred build flavor of JavaScriptCore.
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US.  Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc:+'

/**
 * Whether to enable the Hermes VM.
 *
 * This should be set on project.ext.react and mirrored here.  If it is not set
 * on project.ext.react, JavaScript will not be compiled to Hermes Bytecode
 * and the benefits of using Hermes will therefore be sharply reduced.
 */
def enableHermes = project.ext.react.get("enableHermes", false);


def getEnvStr(key, defaultVal = "") {
    if (project.env) {
        return project.env.get(key)
    }
    return defaultVal
}


task copyIcon(type: Copy) {
    def iconMenu = getEnvStr("APP_ICON");

    from file("../../" + iconMenu)

//    def idx = iconMenu.lastIndexOf("/")
//    if (idx < 0) {
//        return
//    }

    into file("src/main/res/mipmap-xhdpi/")
    rename { fileName ->
        "icon_app.png"
    }
}


android {
    compileSdkVersion "$compilesdk_version".toInteger()
    buildToolsVersion "$buildtools_version"


    viewBinding {
        enabled = true
    }

    if (getEnvStr("APP_ICON") != "") {
        preBuild.dependsOn(copyIcon)
    }

    defaultConfig {
        applicationId getEnvStr("APP_ID")
        manifestPlaceholders = [app_name: getEnvStr("APP_NAME")]

        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode Integer.parseInt(getEnvStr("VERSION_CODE", "1"))
        versionName getEnvStr("VERSION_NAME")

        // for react-native-config 包名不统一时需手动指定 AndroidManifest.xml里的包名
        resValue "string", "build_config_package", "net.xixian"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        vectorDrawables.useSupportLibrary = true

        multiDexEnabled true//开启multi-dexing支持

        splits {
            abi {
                reset()
                enable enableSeparateBuildPerCPUArchitecture
                universalApk false  // If true, also generate a universal APK
                include "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
            }
        }

        signingConfigs {
            //keystone
            release {
                storeFile file("$store_file")
                keyAlias "$key_alias"
                storePassword "$store_password"
                keyPassword "$key_password"
            }

            debug {
                storeFile file("$store_file")
                keyAlias "$key_alias"
                storePassword "$store_password"
                keyPassword "$key_password"
            }
        }

        packagingOptions {
            //去除重复依赖项
//        exclude 'org/joda/time/format/**'
            def taskName = getGradle().getStartParameter().getTaskRequests().toString()
            exclude "**/libjsc*.so"
            if (taskName.toLowerCase().contains("release")) {
                exclude '**/libhermes-inspector.so'
                exclude '**/libhermes-executor-debug.so'
                exclude '**/libhermes-executor-common-debug.so'
            } else {
                exclude '**/libhermes-executor-release.so'
                exclude '**/libhermes-executor-common-release.so'
            }
        }

    }


    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }


    buildTypes {
        release {
            ndk {
                abiFilters "armeabi-v7a"/*, "x86"*///输出指定abi体系结构下的so库。
            }
            minifyEnabled true//混淆开启
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release//设置签名信息
        }
        debug {
            ndk {
                abiFilters "armeabi-v7a"/*, "x86"*///输出指定abi体系结构下的so库。
            }
            jniDebuggable true
            minifyEnabled false//混淆开启
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug//设置签名信息
        }
    }

    applicationVariants.all { variant ->
        //修改输出文件名
        if (variant.buildType.name == 'release') {
            variant.outputs.all { output ->
                def releaseApkName = getEnvStr("APK_NAME") + "_" + versionName + '.apk'
                outputFileName = releaseApkName
                variant.getPackageApplication().outputDirectory = new File("../../" + getEnvStr("OUT_MENU"))
            }
        }

        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // https://developer.android.com/studio/build/configure-apk-splits.html
            // Example: versionCode 1 will generate 1001 for armeabi-v7a, 1002 for x86, etc.
            def versionCodes = ["armeabi-v7a": 1, "x86": 2, "arm64-v8a": 3, "x86_64": 4]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        defaultConfig.versionCode * 1000 + versionCodes.get(abi)
            }

        }
    }

}

repositories {
    flatDir {
        //引用aar路径
        dirs 'libs'
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])

    //Cockroach
    implementation 'com.github.SJJ-dot:Cockroach:2.0.1'


    testImplementation "junit:junit:$junit"
    androidTestImplementation "androidx.test.ext:junit:$junit_test"
    androidTestImplementation "androidx.test:runner:$junit_runner"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espresso_core"

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$ktx_coroutines_core"

    implementation "androidx.appcompat:appcompat:$appcompat"


    //多dex
    implementation "androidx.multidex:multidex:$multidex_version"
    //动态权限申请
    implementation 'com.hjq:xxpermissions:8.6'
    //mmkv安全加密组件
    implementation "com.tencent:mmkv-static:$mmkv"

    implementation project(':mvvm')
    implementation project(':native-mod')
    implementation project(':react-native-image-crop-picker')

    //bugly日志收集
    implementation 'com.tencent.bugly:crashreport:3.2.422'
    //其中latest.release指代最新Bugly SDK版本号，也可以指定明确的版本号，例如2.1.9
    implementation 'com.tencent.bugly:nativecrashreport:3.7.471'
    //其中latest.release指代最新Bugly NDK版本号，也可以指定明确的版本号，例如3.0

    //noinspection GradleDynamicVersion
    implementation "com.facebook.react:react-native:+"

    debugImplementation("com.facebook.flipper:flipper:$flipper_version") {
        exclude group: 'com.facebook.fbjni'
    }
    debugImplementation("com.facebook.flipper:flipper-network-plugin:$flipper_version") {
        exclude group: 'com.facebook.flipper'
        exclude group: 'com.squareup.okhttp3', module: 'okhttp'
    }

    debugImplementation("com.facebook.flipper:flipper-fresco-plugin:$flipper_version") {
        exclude group: 'com.facebook.flipper'
    }

    if (enableHermes) {
        def hermesPath = "../../node_modules/hermes-engine/android/";
        debugImplementation files(hermesPath + "hermes-debug.aar")
        releaseImplementation files(hermesPath + "hermes-release.aar")
    } else {
        implementation jscFlavor
    }
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}


apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)
