{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"sty": {
		"prefix": [
			"sty",
		],
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"body": [
			"style={[{$0},]}",
		],
		"description": "tsx style"
	},
	"react func": {
		"prefix": [
			"tem",
			"rea",
		],
		"scope": "javascriptreact,typescriptreact",
		"body": [
			"import React from 'react'",
			"import { Platform, View, Text , StyleSheet } from \"react-native\";",
			"import { V } from '@common/lib/components/custom/V';",
			"import { useInit, useObjState } from '@common/lib/hooks';",
			"",
			"",
			"interface ${TM_FILENAME_BASE}Prop {",
			"",
			"}",
			"",
			"",
			"export class ${TM_FILENAME_BASE}State {",
			"",
			"",
			"    //更新组件",
			"    get \\$update() { return }",
			"    constructor(",
			"        //组件属性",
			"        public prop_: ${TM_FILENAME_BASE}Prop,",
			"    ) {",
			"",
			"    }",
			"",
			"",
			"",
			"}///////////////${TM_FILENAME_BASE}State end///////////////////",
			"",
			"",
			"",
			"/**",
			" * ",
			" * @param prop ",
			" * @returns ",
			" */",
			"export function ${TM_FILENAME_BASE}(prop: ${TM_FILENAME_BASE}Prop) {",
			"",
			"    //组件状态",
			"    const st = useObjState(() => new ${TM_FILENAME_BASE}State(prop), prop)",
			"",
			"    //组件初始化",
			"    useInit(async () => {",
			"",
			"",
			"        return async () => { //组件卸载",
			"",
			"        }",
			"    })",
			"",
			"",
			"",
			"",
			"    /////////////////////////////////////////",
			"    //////// ${TM_FILENAME_BASE} view//////////",
			"    /////////////////////////////////////////",
			"    return (",
			"        <V>",
			"",
			"        </V>",
			"    )",
			"",
			"",
			"}///////////////${TM_FILENAME_BASE} end//////////////////",
			"",
			"const sty = StyleSheet.create({",
			"",
			"})",
		],
		"description": "vue template"
	},
	"react template": {
		"prefix": [
			"reac",
			"temp",
		],
		"scope": "javascriptreact,typescriptreact",
		"body": [
			"import React, { Component } from 'react'",
			"import { Platform, View, Text , StyleSheet } from \"react-native\";",
			"",
			"",
			"interface ${TM_FILENAME_BASE}Prop {",
			"",
			"}",
			"",
			"",
			"class ${TM_FILENAME_BASE}State {",
			"",
			"}",
			"",
			"export class ${TM_FILENAME_BASE} extends Component<${TM_FILENAME_BASE}Prop, ${TM_FILENAME_BASE}State> {",
			"",
			"",
			"    constructor(prop: ${TM_FILENAME_BASE}Prop) {",
			"        super(prop)",
			"        this.state = new ${TM_FILENAME_BASE}State()",
			"    }",
			"",
			"    componentDidMount() {",
			"    }",
			"",
			"    componentWillUnmount() {",
			"    }",
			"",
			"",
			"",
			"    render() {",
			"        return (",
			"            <>",
			"",
			"            </>",
			"        )",
			"    } //render end",
			"",
			"}",
			"",
			"const sty = StyleSheet.create({",
			"",
			"})",
		],
		"description": "vue template"
	}
}